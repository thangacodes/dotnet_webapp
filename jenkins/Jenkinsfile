pipeline {
    agent any
	environment {
	        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
		AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
		AWS_DEFAULT_REGION    = "ap-south-1"
	}
    stages {
        stage('Checkout SCM') {
            steps {
	        script{
		     checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/thangacodes/dotnet_webapp.git']])
		    }         
             }
        }
        stage('InfraBuild') {
            steps {
                script {
                    dir('infrabuild_scripts') {
                        echo "navigating to the Infrabuild_scripts"
			input(message: "Are you sure to proceed?", ok: "Proceed")
                        sh '''
			terraform init
                        terraform fmt
                        terraform validate
			terraform plan -var-file=terraform.tfvars
                        '''
                    }
                }
            }
        }
	stage('Image_Build'){
	   steps{
	       script {
		   dir('super-service'){
			echo "Image build and pushing to docker hub repo.."
			input(message: "Do you want to proceed?", ok: "Yes")
			sh '''
                        tree
			docker build -t dotnet .
			docker tag dotnet durai5050/dotnet:latest
			docker tag dotnet durai5050/dotnet:${BUILD_NUMBER}
                        docker images
			'''
			}
		    }
		}
	}
	stage('Push DockerImage to DockerHub'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'docker_cred', passwordVariable: 'docker_credPassword', usernameVariable: 'docker_credUsername')]){
                    sh "docker login -u ${env.docker_credUsername} -p ${env.docker_credPassword}"
                    sh 'docker image push durai5050/dotnet:latest'
                    sh 'docker image push durai5050/dotnet:${BUILD_NUMBER}'
                }
            }
        }
	stage('App_Deployment'){
	    steps{
		   script {
		    dir('kubefiles'){
	            input(message: "Do you want to proceed?", ok: "Yes")
		    sh '''
			echo "kubectl version checking.."
                        kubectl version --client
			echo "Updating kubeconfig file.."
		        aws eks update-kubeconfig --name project_eks_cluster
			echo "NameSpace creation.."
			kubectl apply -f ns.yaml
                        kubectl get ns
			echo "Service like ALB creation.."
			kubectl apply -f service.yaml
		    '''
		}
	     }
	  }
	}
     }
  }
