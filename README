# .NET Core Web API application
I used my own AWS account to spin up an EC2 machine, which I used to test and build this entire source code into a Docker image, then ran a Docker container to run the Web application.
It is necessary to install Docker on the machine where you are doing docker builds, and to run the Docker daemon on that machine. 

# Pre-checks:
a) Docker Engine should be installed via YUM command,
$ sudo yum install -y docker
$ sudo systemctl start docker.service
$ sudo systemctl status docker.service
$ sudo usermod -aG docker $USER

Initially, I cloned the given code from mail to my Linux box, where I debugged and tested the source code in Docker containers. The source code structure should look like this after composing Dockerfile,
# tree super-service/
super-service/
├── Dockerfile
├── Time
├── src
│   ├── Controllers
│   │   └── TimeController.cs
│   ├── Model
│   │   ├── IClock.cs
│   │   └── WallClock.cs
│   ├── Program.cs
│   ├── Properties
│   │   └── launchSettings.json
│   ├── Startup.cs
│   ├── SuperService.csproj
│   ├── appsettings.Development.json
│   └── appsettings.json
└── test
    ├── MockClock.cs
    ├── SuperService.UnitTests.csproj
    └── TimeControllerTests.cs
5 directories, 14 files

# Making Docker Image:
In order to build the Docker images, I composed a Dockerfile and moved it to the source code folder, using the following commands,
$ docker build -t sourceimage .
$ docker images
$ docker run --name webapp -d -p 8080:80 sourceimage
$ docker ps 
In order to see if the application is working properly, use the following URL on the browser,
http://52.66.206.163:8080/Time

# You can find the application URL with the output snippet in the repository itself.
Please note, I referred to this page to build docker image from a .net application given source code.
https://learn.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows&pivots=dotnet-8-0#create-the-dockerfile 
==========================================================================================================================
In order to build and deploy the application in a container, I used AWS Elastic Kubernetes Service, which I am quite familiar with,

# I used Terraform (IaC) to set up the entire infrastructure with EKS cluster on AWS.Terraform binary needs to be installed on the machine for Jenkins to pick it up,

1) Create a VPC with the CIDR range of 192.168.0.0/16
2) Create '3' private subnet and '1' public subnet to setup Docker and Jenkins CICD on an EC2 machine
   a) Private_Subnets: 192.168.1.0/24, 192.168.2.0/24, 192.168.3.0/24
   b) Public_Subnets: 192.168.4.0/24,192.168.5.0/24,192.168.6.0/24
3) Also, I have created '1' InternetGateway, NatGateway and '3' RouteTable for each private and public subnet.
4) Using Jenkins, I created a pipeline job with a couple stages defined in Jenkinsfile, and I installed the required plugins before I built the pipeline job.
5) The app is going to be deployed in a NameSpace called "webapp" in Kubernetes, and to access the app, I enabled a service called "LoadBalancer" in the cloud.
6) After deployment, we get an Endpoint of Application LoadBalancer in AWS via Terraform output.tf file.
7) The WebUI will display the current date and time when you access the unique ALB endpoint on the browser.

## How to execute the Terraform code in standalone machine:
In the end, all you have to do is clone the code wherever you want,
$ git clone https://github.com/thangacodes/dotnet_webapp.git
$ cd dotnet_webapp/infrabuild_scripts
$ terraform init
$ terraform fmt
$ terraform plan -var-file terraform.tfvars
$ terraform apply -var-file terraform.tfvars --auto-approve

# Terraform scripts executing the required setup will be provisioned on AWS accounts once the scripts are executed.
$ aws eks update-kubeconfig --name project_eks_cluster    //Update kubeconfig file
$ cd ../kubefiles/
$ kubectl get nodes               //checking the node
$ kubectl apply -f ns.yaml       //Creating a custom namespace (virtual cluster)
$ kubectl apply -f service.yaml //Deployment with ALB provision

Note: A dotnet image has already been pushed to my public DockerHub repository, so anyone can pull it.
